import tkinter as tk
import datetime
import pandas as pd
import data_download as dd
from PIL import ImageTk, Image
import datetime
import os
import magic
import signal

print(datetime.datetime.now())

#os.remove('app_test/ABBV.csv')
names = os.listdir('app_test')
for i in names:
    os.remove('app_test/'+i)

all_tickers= pd.read_csv('sources_linker/tickers.csv')
all_tickers = all_tickers['Symbol']
print(all_tickers)

dt = pd.read_csv('sources_linker/trading_days.csv')
trading_day = False
today = datetime.date.today()
today = str(today)

t=[]

for c in today:
    t.append(ord(c))
    
for i in range(len(dt[' '])):
    k=[]
    for c in dt[' '][i]:
        k.append(ord(c))
    if k==t:
        trading_day = True

      
dd.setup_env_file()
stocks = os.getenv('selected_stocks')
api = os.getenv('API_provider')
class App:
    def __init__(self, master):
        self.app = None
        api_already = 0  
        if os.getenv('selected_stocks') == None or os.getenv('selected_stocks')=='' or os.getenv('selected_stocks')=='[]':   
            self.master = master
            master.title("Plutus")
            self.master.geometry("150x500")

            # Creating a styled label with a larger font size and bold text
            self.ticker_label = tk.Label(master, text="Select Ticker(s)", font=("Helvetica", 14, "bold"), fg="#555")
            self.ticker_label.pack(pady=10)

            # Adding a border and a background color to the Listbox
            self.lb = tk.Listbox(master, selectmode=tk.MULTIPLE, bd=0, bg="#eee")

            # Inserting each ticker into the Listbox
            for i in all_tickers:
                self.lb.insert(tk.END, f"{i}")

            self.lb.pack(fill='both', expand=True)
            lol = os.getenv('API_provider')
            if os.getenv('API_provider') != '':
                self.start_button = tk.Button(master, text="Start", font=("Helvetica", 14, "bold"), fg="white", bg="#555", command=self.start)
                self.start_button.pack(pady=10)
                api_already = 1
            else:
                self.dropdown_var = tk.StringVar()
                self.dropdown_var.set('Choose api')
                self.dropdown_var.trace("w", lambda name, index, mode: self.update_input_fields())
                self.dropdown_options = ['Alpaca API', 'Coming Soon']
                self.dropdown = tk.OptionMenu(master, self.dropdown_var, *self.dropdown_options)
                self.dropdown.config(bd=0, bg="#eee", font=("Helvetica", 12))
                self.dropdown.pack(pady=5)      

                # Creating styled labels and input fields
                self.input_label = tk.Label(master, text="Secret Key", font=("Helvetica", 14, "bold"), fg="#555")
                self.input_entry = tk.Entry(master, font=("Helvetica", 12))
                self.input_label_pub = tk.Label(master, text="Public Key", font=("Helvetica", 14, "bold"),





def get_keys(self):
secret_key = self.input_entry.get()
public_key = self.input_entry_pub.get()
paper_trade = self.input_checkbox_var.get()
api = self.dropdown_var.get()

python
Copy code
    if api=='Alpaca API':
        if secret_key != '' and public_key != '':
            with open('.env', 'w') as f:
                f.write(f'selected_stocks={self.stocks}\n')
                f.write(f'API_provider={api}\n')
                f.write(f'API_key_id={public_key}\n')
                f.write(f'API_secret_key={secret_key}\n')
                f.write(f'paper_trade={paper_trade}')
                
            self.master.destroy()
            os.system('python appV2.pyw')
    elif api=='Coming Soon':
        pass
    
def update_input_fields(self):
    if self.dropdown_var.get() == 'Alpaca API':
        self.input_label.config(text="Secret Key")
        self.input_label_pub.config(text="Public Key")
        self.input_checkbox.config(text="Paper Trade")
    elif self.dropdown_var.get() == 'Coming Soon':
        pass
    
def start(self):
    # Getting all the selected tickers from the Listbox and storing them in a list
    self.stocks = []
    for i in self.lb.curselection():
        self.stocks.append(all_tickers[i])
    self.stocks = str(self.stocks)
    
    self.get_keys()
    
root = tk.Tk()
app = App(root)
root.mainloop()